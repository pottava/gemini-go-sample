// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gemini/v2/text.proto

package geminiv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/pottava/gemini-go-sample/internal/gen/gemini/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GeminiServiceName is the fully-qualified name of the GeminiService service.
	GeminiServiceName = "gemini.v2.GeminiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GeminiServiceGenerateProcedure is the fully-qualified name of the GeminiService's Generate RPC.
	GeminiServiceGenerateProcedure = "/gemini.v2.GeminiService/Generate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	geminiServiceServiceDescriptor        = v2.File_gemini_v2_text_proto.Services().ByName("GeminiService")
	geminiServiceGenerateMethodDescriptor = geminiServiceServiceDescriptor.Methods().ByName("Generate")
)

// GeminiServiceClient is a client for the gemini.v2.GeminiService service.
type GeminiServiceClient interface {
	Generate(context.Context, *connect.Request[v2.GenerateRequest]) (*connect.Response[v2.GenerateResponse], error)
}

// NewGeminiServiceClient constructs a client for the gemini.v2.GeminiService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGeminiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GeminiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &geminiServiceClient{
		generate: connect.NewClient[v2.GenerateRequest, v2.GenerateResponse](
			httpClient,
			baseURL+GeminiServiceGenerateProcedure,
			connect.WithSchema(geminiServiceGenerateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// geminiServiceClient implements GeminiServiceClient.
type geminiServiceClient struct {
	generate *connect.Client[v2.GenerateRequest, v2.GenerateResponse]
}

// Generate calls gemini.v2.GeminiService.Generate.
func (c *geminiServiceClient) Generate(ctx context.Context, req *connect.Request[v2.GenerateRequest]) (*connect.Response[v2.GenerateResponse], error) {
	return c.generate.CallUnary(ctx, req)
}

// GeminiServiceHandler is an implementation of the gemini.v2.GeminiService service.
type GeminiServiceHandler interface {
	Generate(context.Context, *connect.Request[v2.GenerateRequest]) (*connect.Response[v2.GenerateResponse], error)
}

// NewGeminiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGeminiServiceHandler(svc GeminiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	geminiServiceGenerateHandler := connect.NewUnaryHandler(
		GeminiServiceGenerateProcedure,
		svc.Generate,
		connect.WithSchema(geminiServiceGenerateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gemini.v2.GeminiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GeminiServiceGenerateProcedure:
			geminiServiceGenerateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGeminiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGeminiServiceHandler struct{}

func (UnimplementedGeminiServiceHandler) Generate(context.Context, *connect.Request[v2.GenerateRequest]) (*connect.Response[v2.GenerateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gemini.v2.GeminiService.Generate is not implemented"))
}
